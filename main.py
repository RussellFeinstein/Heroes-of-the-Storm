"""
Russell Feinstein
Class: CS 677
Date: Wednesday, April 27, 2022
Final Project
Takes the CSV file generated by 'get_and_parse_data.py' and determines
if there is a recognizable pattern for whether a specific group of 5 heroes
won or lost the game against another specific group of 5 heroes.
"""

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.model_selection import train_test_split as tts
from sklearn.ensemble import RandomForestClassifier
from matplotlib import pyplot as plt
import seaborn as sns
from sklearn.naive_bayes import GaussianNB


def random_forest(N, d, x_train, y_train, x_test, y_test):
  """Trains, tests, and computes accuracy of a RandomForestClassifier given
  an N and d value.

  Args:
      N (int): Number of trees to use
      d (int): Max depth to use
      x_train (dataframe): Training features
      y_train (dataframe): Training labels
      x_test (dataframe): Test features
      y_test (dataframe): Test labels

  Returns:
      float: Accuracy of the model
  """
  forest = RandomForestClassifier(n_estimators=N, criterion='entropy',
                                  max_depth=d, random_state=6396)
  forest.fit(x_train, y_train)
  predictions3 = forest.predict(x_test)

  # Initialize variables to store if prediction is correct
  correct = 0
  incorrect = 0
  for x, y in zip(y_test, predictions3):
    if x == y:
      correct += 1
    else:
      incorrect += 1
  
  accuracy = 100 * correct / (incorrect + correct)

  return accuracy


def main():
  # Import data to dataframe
  df = pd.read_csv('match_history.csv')

  # Train test split
  x_train, x_test, y_train, y_test = tts(df.iloc[:,:-1],df.loc[:,'winner'],
                                          test_size=.4, random_state=1)


  print(df.corr())

  # Create data strcuture to store accuracies
  forest_accuracies = {}

  # Compute the accuracies for all permutatations of d and N
  for d in range (1,11):
    depth = str(d) + 'depth'
    forest_accuracies[depth] = {}
    for n in range (1,20):
      num_trees = str(n) + 'trees'
      accuracy = random_forest(n, d, x_train, y_train, x_test, y_test)
      forest_accuracies[depth][num_trees] = accuracy

  print(forest_accuracies)

  # Ultimately, no specific N and d created any significant pattern
  # The chosen values were barely better than a coin flip

  forest = RandomForestClassifier(n_estimators=7, criterion='entropy',
                                  max_depth=7, random_state=7)
  forest.fit(x_train, y_train)
  predictions = forest.predict(x_test)

  print(predictions)
  print(y_test)
  print(accuracy_score(predictions, y_test))

  # Compute and show confusion matrix
  mat = confusion_matrix(y_test, predictions)
  sns.heatmap(mat.T, square=True, annot=True, fmt= 'd', 
              xticklabels=['Team 1', 'Team 2'], yticklabels=['Team 1','Team 2'])
  plt.xlabel('True Label')
  plt.ylabel('Predicted Label')
  plt.show()

  # Naive Bayes

  model = GaussianNB()
  model.fit(x_train, y_train)
  predictions = model.predict(x_test)
  
  # Initialize variables to store if prediction is correct
  correct = 0
  incorrect = 0
  for x, y in zip(y_test, predictions):
    if x == y:
      correct += 1
    else:
      incorrect += 1
  
  # Calculate accuracy
  accuracy = 100 * correct / (incorrect + correct)
  print(round(accuracy, 2))


  # Compute and show confusion matrix
  mat = confusion_matrix(y_test, predictions)
  categories = ['Abnormal', 'Normal']
  sns.heatmap(mat.T, square=True, annot=True, fmt= 'd', xticklabels=categories, yticklabels=categories)
  plt.xlabel('True Label')
  plt.ylabel('Predicted Label')
  plt.show()


  # Logistic Regression
  log_reg = LogisticRegression()
  log_reg.fit(x_train, y_train)
  y_pred = log_reg.predict(x_test)

  print(accuracy_score(y_test, y_pred))

  # Compute and show confusion matrix
  mat = confusion_matrix(y_test, y_pred)
  sns.heatmap(mat.T, square=True, annot=True, fmt= 'd',
             xticklabels=['Team 1', 'Team 2'], yticklabels=['Team 1','Team 2'])
  plt.xlabel('True Label')
  plt.ylabel('Predicted Label')
  plt.show()



if __name__ == '__main__':
  main()
